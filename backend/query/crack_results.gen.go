// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"maxxgui/backend/model"
)

func newCrackResult(db *gorm.DB, opts ...gen.DOOption) crackResult {
	_crackResult := crackResult{}

	_crackResult.crackResultDo.UseDB(db, opts...)
	_crackResult.crackResultDo.UseModel(&model.CrackResult{})

	tableName := _crackResult.crackResultDo.TableName()
	_crackResult.ALL = field.NewAsterisk(tableName)
	_crackResult.ID = field.NewUint64(tableName, "id")
	_crackResult.TaskID = field.NewString(tableName, "task_id")
	_crackResult.Target = field.NewString(tableName, "target")
	_crackResult.Service = field.NewString(tableName, "service")
	_crackResult.Username = field.NewString(tableName, "username")
	_crackResult.Password = field.NewString(tableName, "password")

	_crackResult.fillFieldMap()

	return _crackResult
}

type crackResult struct {
	crackResultDo

	ALL      field.Asterisk
	ID       field.Uint64
	TaskID   field.String
	Target   field.String
	Service  field.String
	Username field.String
	Password field.String

	fieldMap map[string]field.Expr
}

func (c crackResult) Table(newTableName string) *crackResult {
	c.crackResultDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c crackResult) As(alias string) *crackResult {
	c.crackResultDo.DO = *(c.crackResultDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *crackResult) updateTableName(table string) *crackResult {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint64(table, "id")
	c.TaskID = field.NewString(table, "task_id")
	c.Target = field.NewString(table, "target")
	c.Service = field.NewString(table, "service")
	c.Username = field.NewString(table, "username")
	c.Password = field.NewString(table, "password")

	c.fillFieldMap()

	return c
}

func (c *crackResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *crackResult) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["task_id"] = c.TaskID
	c.fieldMap["target"] = c.Target
	c.fieldMap["service"] = c.Service
	c.fieldMap["username"] = c.Username
	c.fieldMap["password"] = c.Password
}

func (c crackResult) clone(db *gorm.DB) crackResult {
	c.crackResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c crackResult) replaceDB(db *gorm.DB) crackResult {
	c.crackResultDo.ReplaceDB(db)
	return c
}

type crackResultDo struct{ gen.DO }

type ICrackResultDo interface {
	gen.SubQuery
	Debug() ICrackResultDo
	WithContext(ctx context.Context) ICrackResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICrackResultDo
	WriteDB() ICrackResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICrackResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICrackResultDo
	Not(conds ...gen.Condition) ICrackResultDo
	Or(conds ...gen.Condition) ICrackResultDo
	Select(conds ...field.Expr) ICrackResultDo
	Where(conds ...gen.Condition) ICrackResultDo
	Order(conds ...field.Expr) ICrackResultDo
	Distinct(cols ...field.Expr) ICrackResultDo
	Omit(cols ...field.Expr) ICrackResultDo
	Join(table schema.Tabler, on ...field.Expr) ICrackResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICrackResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICrackResultDo
	Group(cols ...field.Expr) ICrackResultDo
	Having(conds ...gen.Condition) ICrackResultDo
	Limit(limit int) ICrackResultDo
	Offset(offset int) ICrackResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICrackResultDo
	Unscoped() ICrackResultDo
	Create(values ...*model.CrackResult) error
	CreateInBatches(values []*model.CrackResult, batchSize int) error
	Save(values ...*model.CrackResult) error
	First() (*model.CrackResult, error)
	Take() (*model.CrackResult, error)
	Last() (*model.CrackResult, error)
	Find() ([]*model.CrackResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrackResult, err error)
	FindInBatches(result *[]*model.CrackResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CrackResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICrackResultDo
	Assign(attrs ...field.AssignExpr) ICrackResultDo
	Joins(fields ...field.RelationField) ICrackResultDo
	Preload(fields ...field.RelationField) ICrackResultDo
	FirstOrInit() (*model.CrackResult, error)
	FirstOrCreate() (*model.CrackResult, error)
	FindByPage(offset int, limit int) (result []*model.CrackResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICrackResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c crackResultDo) Debug() ICrackResultDo {
	return c.withDO(c.DO.Debug())
}

func (c crackResultDo) WithContext(ctx context.Context) ICrackResultDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c crackResultDo) ReadDB() ICrackResultDo {
	return c.Clauses(dbresolver.Read)
}

func (c crackResultDo) WriteDB() ICrackResultDo {
	return c.Clauses(dbresolver.Write)
}

func (c crackResultDo) Session(config *gorm.Session) ICrackResultDo {
	return c.withDO(c.DO.Session(config))
}

func (c crackResultDo) Clauses(conds ...clause.Expression) ICrackResultDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c crackResultDo) Returning(value interface{}, columns ...string) ICrackResultDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c crackResultDo) Not(conds ...gen.Condition) ICrackResultDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c crackResultDo) Or(conds ...gen.Condition) ICrackResultDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c crackResultDo) Select(conds ...field.Expr) ICrackResultDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c crackResultDo) Where(conds ...gen.Condition) ICrackResultDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c crackResultDo) Order(conds ...field.Expr) ICrackResultDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c crackResultDo) Distinct(cols ...field.Expr) ICrackResultDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c crackResultDo) Omit(cols ...field.Expr) ICrackResultDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c crackResultDo) Join(table schema.Tabler, on ...field.Expr) ICrackResultDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c crackResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICrackResultDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c crackResultDo) RightJoin(table schema.Tabler, on ...field.Expr) ICrackResultDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c crackResultDo) Group(cols ...field.Expr) ICrackResultDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c crackResultDo) Having(conds ...gen.Condition) ICrackResultDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c crackResultDo) Limit(limit int) ICrackResultDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c crackResultDo) Offset(offset int) ICrackResultDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c crackResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICrackResultDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c crackResultDo) Unscoped() ICrackResultDo {
	return c.withDO(c.DO.Unscoped())
}

func (c crackResultDo) Create(values ...*model.CrackResult) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c crackResultDo) CreateInBatches(values []*model.CrackResult, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c crackResultDo) Save(values ...*model.CrackResult) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c crackResultDo) First() (*model.CrackResult, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrackResult), nil
	}
}

func (c crackResultDo) Take() (*model.CrackResult, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrackResult), nil
	}
}

func (c crackResultDo) Last() (*model.CrackResult, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrackResult), nil
	}
}

func (c crackResultDo) Find() ([]*model.CrackResult, error) {
	result, err := c.DO.Find()
	return result.([]*model.CrackResult), err
}

func (c crackResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrackResult, err error) {
	buf := make([]*model.CrackResult, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c crackResultDo) FindInBatches(result *[]*model.CrackResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c crackResultDo) Attrs(attrs ...field.AssignExpr) ICrackResultDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c crackResultDo) Assign(attrs ...field.AssignExpr) ICrackResultDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c crackResultDo) Joins(fields ...field.RelationField) ICrackResultDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c crackResultDo) Preload(fields ...field.RelationField) ICrackResultDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c crackResultDo) FirstOrInit() (*model.CrackResult, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrackResult), nil
	}
}

func (c crackResultDo) FirstOrCreate() (*model.CrackResult, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrackResult), nil
	}
}

func (c crackResultDo) FindByPage(offset int, limit int) (result []*model.CrackResult, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c crackResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c crackResultDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c crackResultDo) Delete(models ...*model.CrackResult) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *crackResultDo) withDO(do gen.Dao) *crackResultDo {
	c.DO = *do.(*gen.DO)
	return c
}
