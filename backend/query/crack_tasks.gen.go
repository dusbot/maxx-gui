// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"maxxgui/backend/model"
)

func newCrackTask(db *gorm.DB, opts ...gen.DOOption) crackTask {
	_crackTask := crackTask{}

	_crackTask.crackTaskDo.UseDB(db, opts...)
	_crackTask.crackTaskDo.UseModel(&model.CrackTask{})

	tableName := _crackTask.crackTaskDo.TableName()
	_crackTask.ALL = field.NewAsterisk(tableName)
	_crackTask.Status = field.NewUint8(tableName, "status")
	_crackTask.StartTime = field.NewInt64(tableName, "start_time")
	_crackTask.EndTime = field.NewInt64(tableName, "end_time")
	_crackTask.Index = field.NewInt(tableName, "index")
	_crackTask.Total = field.NewInt(tableName, "total")
	_crackTask.Progress = field.NewFloat64(tableName, "progress")
	_crackTask.LastCost = field.NewInt(tableName, "last_cost")
	_crackTask.ID = field.NewString(tableName, "id")
	_crackTask.Targets = field.NewString(tableName, "targets")
	_crackTask.Usernames = field.NewString(tableName, "usernames")
	_crackTask.Passwords = field.NewString(tableName, "passwords")
	_crackTask.Proxies = field.NewString(tableName, "proxies")
	_crackTask.Thread = field.NewInt(tableName, "thread")
	_crackTask.Interval = field.NewInt(tableName, "interval")
	_crackTask.MaxRuntime = field.NewInt(tableName, "max_runtime")

	_crackTask.fillFieldMap()

	return _crackTask
}

type crackTask struct {
	crackTaskDo

	ALL        field.Asterisk
	Status     field.Uint8
	StartTime  field.Int64
	EndTime    field.Int64
	Index      field.Int
	Total      field.Int
	Progress   field.Float64
	LastCost   field.Int
	ID         field.String
	Targets    field.String
	Usernames  field.String
	Passwords  field.String
	Proxies    field.String
	Thread     field.Int
	Interval   field.Int
	MaxRuntime field.Int

	fieldMap map[string]field.Expr
}

func (c crackTask) Table(newTableName string) *crackTask {
	c.crackTaskDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c crackTask) As(alias string) *crackTask {
	c.crackTaskDo.DO = *(c.crackTaskDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *crackTask) updateTableName(table string) *crackTask {
	c.ALL = field.NewAsterisk(table)
	c.Status = field.NewUint8(table, "status")
	c.StartTime = field.NewInt64(table, "start_time")
	c.EndTime = field.NewInt64(table, "end_time")
	c.Index = field.NewInt(table, "index")
	c.Total = field.NewInt(table, "total")
	c.Progress = field.NewFloat64(table, "progress")
	c.LastCost = field.NewInt(table, "last_cost")
	c.ID = field.NewString(table, "id")
	c.Targets = field.NewString(table, "targets")
	c.Usernames = field.NewString(table, "usernames")
	c.Passwords = field.NewString(table, "passwords")
	c.Proxies = field.NewString(table, "proxies")
	c.Thread = field.NewInt(table, "thread")
	c.Interval = field.NewInt(table, "interval")
	c.MaxRuntime = field.NewInt(table, "max_runtime")

	c.fillFieldMap()

	return c
}

func (c *crackTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *crackTask) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["status"] = c.Status
	c.fieldMap["start_time"] = c.StartTime
	c.fieldMap["end_time"] = c.EndTime
	c.fieldMap["index"] = c.Index
	c.fieldMap["total"] = c.Total
	c.fieldMap["progress"] = c.Progress
	c.fieldMap["last_cost"] = c.LastCost
	c.fieldMap["id"] = c.ID
	c.fieldMap["targets"] = c.Targets
	c.fieldMap["usernames"] = c.Usernames
	c.fieldMap["passwords"] = c.Passwords
	c.fieldMap["proxies"] = c.Proxies
	c.fieldMap["thread"] = c.Thread
	c.fieldMap["interval"] = c.Interval
	c.fieldMap["max_runtime"] = c.MaxRuntime
}

func (c crackTask) clone(db *gorm.DB) crackTask {
	c.crackTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c crackTask) replaceDB(db *gorm.DB) crackTask {
	c.crackTaskDo.ReplaceDB(db)
	return c
}

type crackTaskDo struct{ gen.DO }

type ICrackTaskDo interface {
	gen.SubQuery
	Debug() ICrackTaskDo
	WithContext(ctx context.Context) ICrackTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICrackTaskDo
	WriteDB() ICrackTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICrackTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICrackTaskDo
	Not(conds ...gen.Condition) ICrackTaskDo
	Or(conds ...gen.Condition) ICrackTaskDo
	Select(conds ...field.Expr) ICrackTaskDo
	Where(conds ...gen.Condition) ICrackTaskDo
	Order(conds ...field.Expr) ICrackTaskDo
	Distinct(cols ...field.Expr) ICrackTaskDo
	Omit(cols ...field.Expr) ICrackTaskDo
	Join(table schema.Tabler, on ...field.Expr) ICrackTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICrackTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICrackTaskDo
	Group(cols ...field.Expr) ICrackTaskDo
	Having(conds ...gen.Condition) ICrackTaskDo
	Limit(limit int) ICrackTaskDo
	Offset(offset int) ICrackTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICrackTaskDo
	Unscoped() ICrackTaskDo
	Create(values ...*model.CrackTask) error
	CreateInBatches(values []*model.CrackTask, batchSize int) error
	Save(values ...*model.CrackTask) error
	First() (*model.CrackTask, error)
	Take() (*model.CrackTask, error)
	Last() (*model.CrackTask, error)
	Find() ([]*model.CrackTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrackTask, err error)
	FindInBatches(result *[]*model.CrackTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CrackTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICrackTaskDo
	Assign(attrs ...field.AssignExpr) ICrackTaskDo
	Joins(fields ...field.RelationField) ICrackTaskDo
	Preload(fields ...field.RelationField) ICrackTaskDo
	FirstOrInit() (*model.CrackTask, error)
	FirstOrCreate() (*model.CrackTask, error)
	FindByPage(offset int, limit int) (result []*model.CrackTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICrackTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c crackTaskDo) Debug() ICrackTaskDo {
	return c.withDO(c.DO.Debug())
}

func (c crackTaskDo) WithContext(ctx context.Context) ICrackTaskDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c crackTaskDo) ReadDB() ICrackTaskDo {
	return c.Clauses(dbresolver.Read)
}

func (c crackTaskDo) WriteDB() ICrackTaskDo {
	return c.Clauses(dbresolver.Write)
}

func (c crackTaskDo) Session(config *gorm.Session) ICrackTaskDo {
	return c.withDO(c.DO.Session(config))
}

func (c crackTaskDo) Clauses(conds ...clause.Expression) ICrackTaskDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c crackTaskDo) Returning(value interface{}, columns ...string) ICrackTaskDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c crackTaskDo) Not(conds ...gen.Condition) ICrackTaskDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c crackTaskDo) Or(conds ...gen.Condition) ICrackTaskDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c crackTaskDo) Select(conds ...field.Expr) ICrackTaskDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c crackTaskDo) Where(conds ...gen.Condition) ICrackTaskDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c crackTaskDo) Order(conds ...field.Expr) ICrackTaskDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c crackTaskDo) Distinct(cols ...field.Expr) ICrackTaskDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c crackTaskDo) Omit(cols ...field.Expr) ICrackTaskDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c crackTaskDo) Join(table schema.Tabler, on ...field.Expr) ICrackTaskDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c crackTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICrackTaskDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c crackTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) ICrackTaskDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c crackTaskDo) Group(cols ...field.Expr) ICrackTaskDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c crackTaskDo) Having(conds ...gen.Condition) ICrackTaskDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c crackTaskDo) Limit(limit int) ICrackTaskDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c crackTaskDo) Offset(offset int) ICrackTaskDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c crackTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICrackTaskDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c crackTaskDo) Unscoped() ICrackTaskDo {
	return c.withDO(c.DO.Unscoped())
}

func (c crackTaskDo) Create(values ...*model.CrackTask) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c crackTaskDo) CreateInBatches(values []*model.CrackTask, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c crackTaskDo) Save(values ...*model.CrackTask) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c crackTaskDo) First() (*model.CrackTask, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrackTask), nil
	}
}

func (c crackTaskDo) Take() (*model.CrackTask, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrackTask), nil
	}
}

func (c crackTaskDo) Last() (*model.CrackTask, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrackTask), nil
	}
}

func (c crackTaskDo) Find() ([]*model.CrackTask, error) {
	result, err := c.DO.Find()
	return result.([]*model.CrackTask), err
}

func (c crackTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrackTask, err error) {
	buf := make([]*model.CrackTask, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c crackTaskDo) FindInBatches(result *[]*model.CrackTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c crackTaskDo) Attrs(attrs ...field.AssignExpr) ICrackTaskDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c crackTaskDo) Assign(attrs ...field.AssignExpr) ICrackTaskDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c crackTaskDo) Joins(fields ...field.RelationField) ICrackTaskDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c crackTaskDo) Preload(fields ...field.RelationField) ICrackTaskDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c crackTaskDo) FirstOrInit() (*model.CrackTask, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrackTask), nil
	}
}

func (c crackTaskDo) FirstOrCreate() (*model.CrackTask, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrackTask), nil
	}
}

func (c crackTaskDo) FindByPage(offset int, limit int) (result []*model.CrackTask, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c crackTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c crackTaskDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c crackTaskDo) Delete(models ...*model.CrackTask) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *crackTaskDo) withDO(do gen.Dao) *crackTaskDo {
	c.DO = *do.(*gen.DO)
	return c
}
